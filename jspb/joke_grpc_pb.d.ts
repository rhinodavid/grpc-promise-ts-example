/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: joke
 * file: joke.proto
 * generated at: Mon Apr 20 2020 02:00:37 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as grpc from "grpc";
import * as joke_pb from "./joke_pb";
import { TUnaryRpc } from "grpc-promise-ts";

interface IJokeService
  extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
  getAJoke: IJokeService_IgetAJoke;
}

interface IJokeService_IgetAJoke
  extends grpc.MethodDefinition<joke_pb.JokeRequest, joke_pb.JokeResponse> {
  path: string; // "/joke.Joke/getAJoke"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<joke_pb.JokeRequest>;
  requestDeserialize: grpc.deserialize<joke_pb.JokeRequest>;
  responseSerialize: grpc.serialize<joke_pb.JokeResponse>;
  responseDeserialize: grpc.deserialize<joke_pb.JokeResponse>;
}

export const JokeService: IJokeService;

export interface IJokeServer {
  getAJoke: grpc.handleUnaryCall<joke_pb.JokeRequest, joke_pb.JokeResponse>;
}

export interface IJokeClient {
  getAJoke(
    request: joke_pb.JokeRequest,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
  getAJoke(
    request: joke_pb.JokeRequest,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
  getAJoke(
    request: joke_pb.JokeRequest,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
}

export class JokeClient extends grpc.Client implements IJokeClient {
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options?: object
  );
  public getAJoke(
    request: joke_pb.JokeRequest,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
  public getAJoke(
    request: joke_pb.JokeRequest,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
  public getAJoke(
    request: joke_pb.JokeRequest,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: joke_pb.JokeResponse
    ) => void
  ): grpc.ClientUnaryCall;
}

/**
 * Interface and class to declare a Joke client that has been promisifyed with the
 * `grpc-promise-ts` (https://github.com/rhinodavid/grpc-promise-ts) package
 */
export interface IJokePromiseClient {
  getAJoke: TUnaryRpc<joke_pb.JokeRequest, joke_pb.JokeResponse>;
}

export class JokePromiseClient extends grpc.Client
  implements IJokePromiseClient {
  // This class cannot be directly instantiated.
  // To get an instance of JokePromiseClient, first create
  // a JokeClient and then pass it to the `convertToPromiseClient`
  // function in the `gprc-promise-ts` package
  public getAJoke: TUnaryRpc<joke_pb.JokeRequest, joke_pb.JokeResponse>;

  // TODO: add other types of RPCs
}
